# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import main_pb2 as main__pb2


class PPStub(object):
    """The chat service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateUser = channel.unary_unary(
                '/PP/CreateUser',
                request_serializer=main__pb2.UserRequest.SerializeToString,
                response_deserializer=main__pb2.UserResponse.FromString,
                )
        self.JoinCommunity = channel.unary_unary(
                '/PP/JoinCommunity',
                request_serializer=main__pb2.UserRequest.SerializeToString,
                response_deserializer=main__pb2.UserResponse.FromString,
                )
        self.CheckActionDelay = channel.unary_unary(
                '/PP/CheckActionDelay',
                request_serializer=main__pb2.UserRequest.SerializeToString,
                response_deserializer=main__pb2.UserResponse.FromString,
                )
        self.CheckCommunity = channel.unary_unary(
                '/PP/CheckCommunity',
                request_serializer=main__pb2.UserRequest.SerializeToString,
                response_deserializer=main__pb2.UserResponse.FromString,
                )
        self.NormalAction = channel.unary_unary(
                '/PP/NormalAction',
                request_serializer=main__pb2.UserRequest.SerializeToString,
                response_deserializer=main__pb2.UserResponse.FromString,
                )
        self.DelayedAction = channel.unary_unary(
                '/PP/DelayedAction',
                request_serializer=main__pb2.UserRequest.SerializeToString,
                response_deserializer=main__pb2.UserResponse.FromString,
                )
        self.JoinCommunityTransaction = channel.unary_unary(
                '/PP/JoinCommunityTransaction',
                request_serializer=main__pb2.UserRequest.SerializeToString,
                response_deserializer=main__pb2.UserResponse.FromString,
                )
        self.DisplayCanvas = channel.unary_unary(
                '/PP/DisplayCanvas',
                request_serializer=main__pb2.FrontendRequest.SerializeToString,
                response_deserializer=main__pb2.Canvas.FromString,
                )


class PPServicer(object):
    """The chat service definition.
    """

    def CreateUser(self, request, context):
        """user interfaces
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JoinCommunity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckActionDelay(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckCommunity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NormalAction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DelayedAction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JoinCommunityTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisplayCanvas(self, request, context):
        """interface with the frontend canvas visualization
        cannot use stream, see this: https://stackoverflow.com/questions/58581333/how-to-use-grpc-streaming-in-grpc-web
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PPServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateUser,
                    request_deserializer=main__pb2.UserRequest.FromString,
                    response_serializer=main__pb2.UserResponse.SerializeToString,
            ),
            'JoinCommunity': grpc.unary_unary_rpc_method_handler(
                    servicer.JoinCommunity,
                    request_deserializer=main__pb2.UserRequest.FromString,
                    response_serializer=main__pb2.UserResponse.SerializeToString,
            ),
            'CheckActionDelay': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckActionDelay,
                    request_deserializer=main__pb2.UserRequest.FromString,
                    response_serializer=main__pb2.UserResponse.SerializeToString,
            ),
            'CheckCommunity': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckCommunity,
                    request_deserializer=main__pb2.UserRequest.FromString,
                    response_serializer=main__pb2.UserResponse.SerializeToString,
            ),
            'NormalAction': grpc.unary_unary_rpc_method_handler(
                    servicer.NormalAction,
                    request_deserializer=main__pb2.UserRequest.FromString,
                    response_serializer=main__pb2.UserResponse.SerializeToString,
            ),
            'DelayedAction': grpc.unary_unary_rpc_method_handler(
                    servicer.DelayedAction,
                    request_deserializer=main__pb2.UserRequest.FromString,
                    response_serializer=main__pb2.UserResponse.SerializeToString,
            ),
            'JoinCommunityTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.JoinCommunityTransaction,
                    request_deserializer=main__pb2.UserRequest.FromString,
                    response_serializer=main__pb2.UserResponse.SerializeToString,
            ),
            'DisplayCanvas': grpc.unary_unary_rpc_method_handler(
                    servicer.DisplayCanvas,
                    request_deserializer=main__pb2.FrontendRequest.FromString,
                    response_serializer=main__pb2.Canvas.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'PP', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PP(object):
    """The chat service definition.
    """

    @staticmethod
    def CreateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PP/CreateUser',
            main__pb2.UserRequest.SerializeToString,
            main__pb2.UserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def JoinCommunity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PP/JoinCommunity',
            main__pb2.UserRequest.SerializeToString,
            main__pb2.UserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckActionDelay(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PP/CheckActionDelay',
            main__pb2.UserRequest.SerializeToString,
            main__pb2.UserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckCommunity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PP/CheckCommunity',
            main__pb2.UserRequest.SerializeToString,
            main__pb2.UserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NormalAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PP/NormalAction',
            main__pb2.UserRequest.SerializeToString,
            main__pb2.UserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DelayedAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PP/DelayedAction',
            main__pb2.UserRequest.SerializeToString,
            main__pb2.UserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def JoinCommunityTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PP/JoinCommunityTransaction',
            main__pb2.UserRequest.SerializeToString,
            main__pb2.UserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DisplayCanvas(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PP/DisplayCanvas',
            main__pb2.FrontendRequest.SerializeToString,
            main__pb2.Canvas.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
