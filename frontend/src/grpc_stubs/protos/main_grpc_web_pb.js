/**
 * @fileoverview gRPC-Web generated client stub for 
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.20.3
// source: grpc_stubs/protos/main.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = require('./main_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.PPClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.PPPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.UserRequest,
 *   !proto.UserResponse>}
 */
const methodDescriptor_PP_CreateUser = new grpc.web.MethodDescriptor(
  '/PP/CreateUser',
  grpc.web.MethodType.UNARY,
  proto.UserRequest,
  proto.UserResponse,
  /**
   * @param {!proto.UserRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.UserResponse.deserializeBinary
);


/**
 * @param {!proto.UserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.UserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.UserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.PPClient.prototype.createUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/PP/CreateUser',
      request,
      metadata || {},
      methodDescriptor_PP_CreateUser,
      callback);
};


/**
 * @param {!proto.UserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.UserResponse>}
 *     Promise that resolves to the response
 */
proto.PPPromiseClient.prototype.createUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/PP/CreateUser',
      request,
      metadata || {},
      methodDescriptor_PP_CreateUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.UserRequest,
 *   !proto.UserResponse>}
 */
const methodDescriptor_PP_JoinCommunity = new grpc.web.MethodDescriptor(
  '/PP/JoinCommunity',
  grpc.web.MethodType.UNARY,
  proto.UserRequest,
  proto.UserResponse,
  /**
   * @param {!proto.UserRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.UserResponse.deserializeBinary
);


/**
 * @param {!proto.UserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.UserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.UserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.PPClient.prototype.joinCommunity =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/PP/JoinCommunity',
      request,
      metadata || {},
      methodDescriptor_PP_JoinCommunity,
      callback);
};


/**
 * @param {!proto.UserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.UserResponse>}
 *     Promise that resolves to the response
 */
proto.PPPromiseClient.prototype.joinCommunity =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/PP/JoinCommunity',
      request,
      metadata || {},
      methodDescriptor_PP_JoinCommunity);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.UserRequest,
 *   !proto.UserResponse>}
 */
const methodDescriptor_PP_CheckActionDelay = new grpc.web.MethodDescriptor(
  '/PP/CheckActionDelay',
  grpc.web.MethodType.UNARY,
  proto.UserRequest,
  proto.UserResponse,
  /**
   * @param {!proto.UserRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.UserResponse.deserializeBinary
);


/**
 * @param {!proto.UserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.UserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.UserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.PPClient.prototype.checkActionDelay =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/PP/CheckActionDelay',
      request,
      metadata || {},
      methodDescriptor_PP_CheckActionDelay,
      callback);
};


/**
 * @param {!proto.UserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.UserResponse>}
 *     Promise that resolves to the response
 */
proto.PPPromiseClient.prototype.checkActionDelay =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/PP/CheckActionDelay',
      request,
      metadata || {},
      methodDescriptor_PP_CheckActionDelay);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.UserRequest,
 *   !proto.UserResponse>}
 */
const methodDescriptor_PP_CheckCommunity = new grpc.web.MethodDescriptor(
  '/PP/CheckCommunity',
  grpc.web.MethodType.UNARY,
  proto.UserRequest,
  proto.UserResponse,
  /**
   * @param {!proto.UserRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.UserResponse.deserializeBinary
);


/**
 * @param {!proto.UserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.UserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.UserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.PPClient.prototype.checkCommunity =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/PP/CheckCommunity',
      request,
      metadata || {},
      methodDescriptor_PP_CheckCommunity,
      callback);
};


/**
 * @param {!proto.UserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.UserResponse>}
 *     Promise that resolves to the response
 */
proto.PPPromiseClient.prototype.checkCommunity =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/PP/CheckCommunity',
      request,
      metadata || {},
      methodDescriptor_PP_CheckCommunity);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.UserRequest,
 *   !proto.UserResponse>}
 */
const methodDescriptor_PP_NormalAction = new grpc.web.MethodDescriptor(
  '/PP/NormalAction',
  grpc.web.MethodType.UNARY,
  proto.UserRequest,
  proto.UserResponse,
  /**
   * @param {!proto.UserRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.UserResponse.deserializeBinary
);


/**
 * @param {!proto.UserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.UserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.UserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.PPClient.prototype.normalAction =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/PP/NormalAction',
      request,
      metadata || {},
      methodDescriptor_PP_NormalAction,
      callback);
};


/**
 * @param {!proto.UserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.UserResponse>}
 *     Promise that resolves to the response
 */
proto.PPPromiseClient.prototype.normalAction =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/PP/NormalAction',
      request,
      metadata || {},
      methodDescriptor_PP_NormalAction);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.UserRequest,
 *   !proto.UserResponse>}
 */
const methodDescriptor_PP_DelayedAction = new grpc.web.MethodDescriptor(
  '/PP/DelayedAction',
  grpc.web.MethodType.UNARY,
  proto.UserRequest,
  proto.UserResponse,
  /**
   * @param {!proto.UserRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.UserResponse.deserializeBinary
);


/**
 * @param {!proto.UserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.UserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.UserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.PPClient.prototype.delayedAction =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/PP/DelayedAction',
      request,
      metadata || {},
      methodDescriptor_PP_DelayedAction,
      callback);
};


/**
 * @param {!proto.UserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.UserResponse>}
 *     Promise that resolves to the response
 */
proto.PPPromiseClient.prototype.delayedAction =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/PP/DelayedAction',
      request,
      metadata || {},
      methodDescriptor_PP_DelayedAction);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.UserRequest,
 *   !proto.UserResponse>}
 */
const methodDescriptor_PP_JoinCommunityTransaction = new grpc.web.MethodDescriptor(
  '/PP/JoinCommunityTransaction',
  grpc.web.MethodType.UNARY,
  proto.UserRequest,
  proto.UserResponse,
  /**
   * @param {!proto.UserRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.UserResponse.deserializeBinary
);


/**
 * @param {!proto.UserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.UserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.UserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.PPClient.prototype.joinCommunityTransaction =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/PP/JoinCommunityTransaction',
      request,
      metadata || {},
      methodDescriptor_PP_JoinCommunityTransaction,
      callback);
};


/**
 * @param {!proto.UserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.UserResponse>}
 *     Promise that resolves to the response
 */
proto.PPPromiseClient.prototype.joinCommunityTransaction =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/PP/JoinCommunityTransaction',
      request,
      metadata || {},
      methodDescriptor_PP_JoinCommunityTransaction);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.FrontendRequest,
 *   !proto.Canvas>}
 */
const methodDescriptor_PP_DisplayCanvas = new grpc.web.MethodDescriptor(
  '/PP/DisplayCanvas',
  grpc.web.MethodType.UNARY,
  proto.FrontendRequest,
  proto.Canvas,
  /**
   * @param {!proto.FrontendRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Canvas.deserializeBinary
);


/**
 * @param {!proto.FrontendRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Canvas)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Canvas>|undefined}
 *     The XHR Node Readable Stream
 */
proto.PPClient.prototype.displayCanvas =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/PP/DisplayCanvas',
      request,
      metadata || {},
      methodDescriptor_PP_DisplayCanvas,
      callback);
};


/**
 * @param {!proto.FrontendRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Canvas>}
 *     Promise that resolves to the response
 */
proto.PPPromiseClient.prototype.displayCanvas =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/PP/DisplayCanvas',
      request,
      metadata || {},
      methodDescriptor_PP_DisplayCanvas);
};


module.exports = proto;

